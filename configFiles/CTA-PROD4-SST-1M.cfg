% Configuration file for a SST-1M (DC-SST) in prod-4 (CTA-PROD4 setup).
% Based on SST-DC configuration for prod3(b) with updates by Rafal Modersky.
% Adapted by KB.

  echo
  echo ************************************************************************
#ifdef TELESCOPE
  echo Configuration for single-reflector SST-1M $(TELESCOPE) in Prod-4.
#else
  echo Global configuration parameters for single-reflector SST-1M in Prod-4.
#endif
  echo ************************************************************************
  echo

% Start with configuration items not specific for DC-SST.

#include <CTA-PROD4-site.cfg>
#include <CTA-PROD4-common.cfg>
#include <CTA-PROD4-sipm.cfg>

% The remainder is specific for DC-SST.

% ------------------------- Optical parameters --------------------------

optics_config_name = SST-1M
optics_config_version = 2018-10-11

% ------- Optics in general -------

parabolic_dish      = 0          % 0: Using Davies-Cotton
focal_length        = 560        % [cm] Nominal focal length for camera
effective_focal_length = 569.705 % [cm] Effective focal length only to be used for image analysis. No effect in simulation itself.
mirror_focal_length = 560        % [cm] One fixed focal length for Davies Cotton.
dish_shape_length   = 560        % [cm] Fixed by construction.

% Accuracy of the tracking and measurement of current direction.
% Pointing errors can always be mimicked at the analysis level:
telescope_random_angle         = 0.
telescope_random_error         = 0.

# ------- Mirror parameters -------

mirror_list         = mirror_DC4m_78cm_s2cm_f5.600_nocent.dat
mirror_offset       = 0.       % 0.: Axes crossing at dish center.
focus_offset        = 0.35     % 1./(1./560.-1./9.e5)-560.
% Altitude axis is 90 cm from azimuth axis (towards horizontal viewing direction).
% Optical axis intersects altitude axis.
axes_offsets = 90.,0. 
% Note: height of the altitude axis of 285+40 cm = 325 cm above ground level
% is not part of sim_telarray configuration but of CORSIKA inputs
% (center of fiducial sphere on azimuth axis at height of altitude axis).
% The fiducial sphere radius there has to be large enough that the
% off-centered reflector always fits well into the sphere: r > 300 cm.

#ifdef PERFECT_DISH
  % If all mirrors are just perfect:
  random_focal_length            = 0.
  mirror_reflection_random_angle = 0.0
  mirror_align_random_distance   = 0.0
  mirror_align_random_horizontal = 0.0,0.,0.,0.
  mirror_align_random_vertical   = 0.0,0.,0.,0.
#else
  % Better try to use a realistic configuration:
  % (v3.1): random_focal_length =            3.0 % cm
  random_focal_length = 4.9 % cm
  % (v3.1): mirror_reflection_random_angle = 0.0081 % deg.
  mirror_reflection_random_angle = 0.00524 % deg
  mirror_align_random_distance   = 0.0 % cm
  mirror_align_random_horizontal = 0.0,28.,0.0,0.0
  mirror_align_random_vertical   = 0.0,28.,0.0,0.0
#endif

% ------- Reflectivity -------

% (v3.1): mirror_reflectivity = ref_AR100x.dat % based on AR100 coating, extrapolation based on other coatings.
% mirror_reflectivity = ref_SST1M_DOJLO15469.dat % File still missing
mirror_reflectivity = ref_SST1M_DOJLO_ave_extrapol.dat % Updated 2018-10-05

% ------- Camera and masts shadowing -------

% (v3.1, by default): camera_body_shape = 0 (circular)
% (v3.1): camera_body_diameter = 107 % cm (+10% for shadowing)

camera_body_shape = 3 % hexagonal with two sides parallel to x axis
camera_body_diameter = 97 % cm (exact - basket added in telescope_transmission) 

camera_depth = 75 % cm

% (v3.1): telescope_transmission = 0.87 % Note: camera body is taken care of explicitely (as circular)
telescope_transmission = 0.82,1,-0.03,8.44,1.1

% ---------------------- Camera configuration --------------------------

camera_config_name = DigiCam
camera_config_version = 2018-10-19

% ------- Optics into camera -------

camera_filter = filter_SST1M_fusedsilica.dat % Updated 2018-10-05 (fused silica performing better than plexiglass)
camera_transmission = 1.0 % All accounted for in window as a filter and in light cones.

% ------- Camera pixels and trigger -------

camera_config_file = camera_SST1M_DigiCam_21pix_patch.dat % Note: new pixel numbering
camera_pixels = 1296 

% ------- Nightsky background: p.e. per pixel per ns  -------

% nightsky_background = all:0.0409 % Re-evaluated with testeff, no dark counts (KB)
% nightsky_background = all:0.0322 % New (v5) with Benn&Ellison spectrum: 0.262 ph./(cm^2 ns sr), no dark counts
% OLD_PDE:   nightsky_background = all:0.02545 % New (v5) with references NSB intensity: 0.24 ph./(cm^2 ns sr), no dark counts
% nightsky_background = all:0.03523 % Similar but for LVR3 PDE: 0.24 ph./(cm^2 ns sr), no dark counts (oops, calculated for too small pixel solid angle)
nightsky_background = all:0.04068 % Similar but for LVR3 PDE: 0.24 ph./(cm^2 ns sr), no dark counts. 2018-10-19.

% ------- Photosensors (SiPMs) -------

% OLD PDE:   quantum_efficiency = qe_SST1M_5477_ave.dat
quantum_efficiency = PDE_V_4.4V_LVR5_ext.txt % 2018-09-28 by Andrii Nagai, common for all SSTs

% Added by Orel for the sake of the reports (default values made explicit)
gain_variation = 0.016 % random gain variation, relative
% qe_variation = 0.04  % default value (not calibrated out by default!)
% qe_variation = 0.01 % one percent, relative
qe_variation = 0.03 % common value for SST sensors now

% pm_photoelectron_spectrum = SPE_SST1M_Vb57.50_normalized.dat % includes x-talk
pm_photoelectron_spectrum = SPE_Gentile_oxt0d08_spe0d05_d2018-10-04.txt % Common model spe response for all SSTs.
pm_collection_efficiency = 1.0 % For SiPM we use PDE.
pm_average_gain = 1.6e6        % Gain for LCT-2 from Matthieu Heller, may need gain < 1 pre-amp
pm_gain_index = 1.0 % DC current dependency on voltage as a power law

pm_transit_time = 0.01 %[ns]
transit_time_jitter  = 0.01  % [ns] is negligible

% Gain in pre-amplifier drops with increase NSB current:
% (v4): nsb_gain_drop_scale = 4.90 % [GHz] 1./(2.4 kOhm * 85 fF)/(1e9 ns)
nsb_gain_drop_scale = 1.1 % [GHz] 1./(10 kOhm * y fF)/(1e9 ns)
% This should be changed again with the next revision to:
%   nsb_gain_drop_scale = 4.90 % [GHz] 1./(2.4 kOhm * 85 fF)/(1e9 ns)
% together with corresponding threshold settings.

% ------- Pulse shapes and amplitudes -------

% The single-p.e. pulse shape at the discriminator is not used 
% with digital sum trigger but the program needs something nonetheless (use same as for FADC).
discriminator_pulse_shape = pulse_SST1M_dark.dat % Updated 2018-10-05. Not used since trigger is digital sum. [NO-EFFECT]
discriminator_amplitude = 0. % No analog trigger electronics (majority or analog sum) [NO-EFFECT]

% The digitized single-p.e. pulse shape appropriate for GHz sampling
% (FWHM 3.1 ns) but may have to be replaced for slower sampling.
% fadc_pulse_shape = pulse_SST1M_AfterPreamp.dat % Used for recorded pulse and input to digital sum trigger before shaping.
fadc_pulse_shape = pulse_SST1M_dark.dat % Updated 2018-10-05. Used for recorded pulse and input to digital sum trigger before shaping.

% (v3.1): fadc_pedestal = 50          % Per time slice (positive signals only: unsigned!)
fadc_pedestal = 285   % instead of 50 as for prod-3
fadc_var_pedestal = 0.855
fadc_err_pedestal = 0.
fadc_sysvar_pedestal = 0.

% (v3.1): fadc_amplitude = 20.0       % The peak amplitude in a time slice for high gain.
fadc_amplitude = 5.43  % instead of 20 as for prod-3, resulting in first peak at 5.00
% (v3.1): fadc_noise = 1.5            % Again per time slice (high gain).
fadc_noise = 1.2      % Reported as 14% of the amplitude (when?? where??)

#ifdef WITH_DC_COUPLING
   fadc_ac_coupled = 0 % FADC is DC coupled -- THIS STILL NEEDS TESTING !
#else
   fadc_ac_coupled = 1 % Assuming AC coupled as a safe fall-back for now.
#endif

fadc_max_signal = 65535      % avoid pre-amp saturation with long pulses (use post-processing to emulate that)
% fadc_max_signal = 4095     % Once non-linear response is included in simulation

num_gains = 1

% ------- Simulation and readout windows -------

fadc_MHz = 250 % Sampling rate in MHz

fadc_bins = 90       % Number of time intervals simulated for ADC (75 bins = 300 ns)
fadc_sum_bins = 50   % Number of ADC time intervals actually read out (50 bins = 200 ns)
fadc_sum_offset = 18 % How many intervals summation starts before telescope trigger.
#ifdef DATA_RATE_TEST
% Use just the 100 ns readout window mentioned in the DATA TDR plus margin for pulse shaping
fadc_sum_bins = 30   % Number of ADC time intervals actually read out.
fadc_sum_offset = 10 % How many intervals summation starts before telescope trigger.
#endif

% The discriminator window definition is not relevant here but still formally needed
disc_bins = 90  % Number of time intervals simulated for trigger (set to same value as FADC_BINS). [NO-EFFECT]
disc_start = 0  % How many intervals the trigger simulation starts before the ADC (not relevant, set to zero). [NO-EFFECT]

% ------- Digital sum trigger -------

% Configuration from prod-3b assumes no scaling, signal differencing:

#define DIGITAL_SUM 1

% Telescope trigger (specified even if no majority trigger is used):
default_trigger = DigitalSum

#if defined(DIGICAM_DSUM_NO_SHAPING)
  echo No pulse shaping requested for DigiCam digital sum trigger.
#elif defined(DIGICAM_DSUM_DIFF_PPMM_PZ) || defined(DIGICAM_DSUM_DIFF_POM_PZ) || defined(DIGICAM_DSUM_DIFF_PM_PZ)
  echo Pulse shaping with pole-zero compensation is requested.
#elif undefined(DIGICAM_DSUM_DIFF_PPMM) && undefined(DIGICAM_DSUM_DIFF_POM) && undefined(DIGICAM_DSUM_DIFF_PM)
  echo Default pulse shaping for DigiCam digital sum trigger is 'ppmm' (1/1/-1/-1 kernel).
# define DIGICAM_DSUM_DIFF_PPMM 1
#endif

dsum_shaping_file = none    % Override later as requested
dsum_pedsub = 1             % Pedestal subtraction needed without pulse shaping
dsum_offset = 0.0           % Time offset, be careful when using non-zero values.

dsum_ignore_below = 0       % Clip signals below pedestal to zero
dsum_zero_clip = -1         % -1: after presum, 0: no, 1: before pre-sum (only relevant if ignore_below=0).
% dsum_prescale = 375 256     % Re-establish the old '10 p.e.' clipping (256 * 85 / (10*5.8) = 375).
dsum_prescale = 1 1         % Default to no pre-scaling applied (may get overridden later).
% dsum_clipping = 85          % Result of adding up three pixels in a patch must be <= 255 (or have 2-level clipping).
dsum_clipping = 4095        % Effectively no clipping before patch sum (needs calculation in >=13 bit signed int).
dsum_presum_shift = 0       % Digicam seems to have an 8-bit patch sum (no parity). No bit shift needed.
dsum_presum_max = 255       % 8-bit value must be in range 0 to 255.
dsum_shaping_renormalize=0  % Re-normalizing would not work in integer mode anymore.

#if defined(DIGICAM_DSUM_DIFF_PM)

echo Digital sum trigger with direct difference (pm: 1/-1) pulse shaping.

dsum_shaping_file = dsum-shaping-pm.dat
dsum_pedsub = 0             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
dsum_prescale = 375 256     % Re-establish the old '10 p.e.' clipping (256 * 85 / (10*5.8) = 375).
dsum_threshold = 104        % 2018-10-21 evaluation (same for AC or DC coupling)
% Note: without the prescaling a threshold of (104*256)/375 = 70 should be equivalent
% but we don't want to impose that as a last-minute change.

#elif defined(DIGICAM_DSUM_DIFF_PM_PZ)

echo Digital sum trigger with direct difference and approximate pole-zero compensation (8/-7).

dsum_shaping_file = dsum-shaping-pm-pz.dat % (8/-7) Note factor of 8 larger coefficients than floating-point version.
dsum_pedsub = 1             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
dsum_prescale = 47 256      % Approximately compensate factor 8 larger coefficients.
dsum_threshold = 0          % Does not work :(

#elif defined(DIGICAM_DSUM_DIFF_POM)

echo Digital sum trigger with next difference and approximate pole-zero compensation (1/0/-1).

dsum_shaping_file = dsum-shaping-pom.dat % (1/0/-1) Same as with floating-point version.
dsum_pedsub = 0             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
dsum_prescale = 375 256     % Re-establish the old '10 p.e.' clipping (256 * 85 / (10*5.8) = 375).
dsum_threshold = 171        % 2018-10-21 evaluation (same for AC or DC coupling)
% Note: without the prescaling a threshold of (171*256)/375 = 116 should be equivalent
% but we don't want to impose that as a last-minute change.

#elif defined(DIGICAM_DSUM_DIFF_POM_PZ)

echo Digital sum trigger with next difference and approximate pole-zero compensation (8/0/-6).

dsum_shaping_file = dsum-shaping-pom-pz.dat % (8/0/-6) Note factor of 8 larger coefficients than floating-point version.
dsum_pedsub = 1             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
dsum_prescale = 47 256      % Approximately compensate factor 8 larger coefficients.
dsum_threshold = 0          % Does not work :(

#elif defined(DIGICAM_DSUM_DIFF_PPMM)

echo Digital sum trigger with averaged next difference (ppmm: 1/1/-1/-1) pulse shaping.

dsum_shaping_file = dsum-shaping-ppmm.dat % (1/1/-1/-1) Note factor of 2 larger coefficients than floating-point version.
dsum_pedsub = 0             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
% dsum_prescale = 188 256     % Compensate factor 2 from different shaping.
dsum_prescale = 94 256      % No longer normalized out. Need again factor 2 smaller.
dsum_threshold = 74         % 2018-10-21 evaluation (same for AC or DC coupling)
% Note: without the prescaling a threshold of (74*256)/188 = 100 should be equivalent
% but we don't want to impose that as a last-minute change.

# ifdef FULLMOON
   echo Configuring for sky illuminated by full moon.
   nightsky_background = all:1.086
   dsum_threshold = 138
#  define MOON_SET 1
# endif
# ifdef HALFMOON
   echo Configuring for sky illuminated by half moon.
   nightsky_background = all:0.2274
   dsum_threshold = 106
#  define MOON_SET 2
# endif
# ifdef ULTIMATE_THRESHOLD
   echo Configuring ultimate threshold for dark sky.
   dsum_threshold = 57
# endif

#elif defined(DIGICAM_DSUM_DIFF_PPMM_PZ)

echo Digital sum trigger with averaged next difference and approximate pole-zero compensation (ppmm: 4/4/-3/-3).

dsum_shaping_file = dsum-shaping-ppmm-pz.dat % (4/4/-3/-3) Note factor of 8 larger coefficients than floating-point version.
dsum_pedsub = 1             % No pedestal subtraction needed with strict differencing but with pole-zero compensation.
dsum_prescale = 47 256      % Compensate factor 8 from different shaping.
dsum_threshold = 0          % Does not work :(

#else

% Alternate scheme without signal differencing:

echo Digital sum trigger without pulse shaping.

dsum_shaping_file = none
dsum_pedsub = 1             % Need pedestal subtraction without differencing
dsum_prescale = 1 1         % Try more direct approach without pre-scaling.
# ifdef WITH_DC_COUPLING
   % echo Beware of possible problem without shaping in DC-coupled case.
   % dsum_threshold = 293     % 2018-10-21 evaluation (not recommended option)
   echo Problem without shaping in DC-coupled case should be fixed now.
   dsum_threshold = 161     % 2018-10-21 evaluation (not recommended option)
# else
   dsum_threshold = 161     % 2018-10-21 evaluation (this option seems OK)
# endif

#endif

#if defined(HALFMOON) || defined(FULLMOON)
   % Without increased current limit the trigger would get turned off
   trigger_current_limit = 2000.0 % [microAmps]
# ifndef MOON_SET
   error Full or partial moon light was requested with a trigger not configured for it.
# endif
#endif

teltrig_min_time = 0        % ns -- irrelevant with dsum trigger [NO-EFFECT]
teltrig_min_sigsum = 0      % pV.s -- irrelevant with dsum trigger [NO-EFFECT]

trigger_delay_compensation = 0,0,0       % Keep at zero; no more cameras with multiple trigger types

asum_threshold = 0.0        % No analog sum trigger [NO-EFFECT]

only_triggered_telescopes=1

% -------------------------- Technical --------------------------
only_triggered_telescopes = 1
only_triggered_arrays = 1
iobuf_maximum = 500000000
min_photons = 220
min_photoelectrons = 10
store_photoelectrons = 8
#ifdef ULTIMATE_THRESHOLD
min_photons = 150                                               % With fewer photons don't waste CPU time.
min_photoelectrons = 7                                          % Usually, way more p.e. are required.
store_photoelectrons = 5                                        % Save individual photo-electrons
#endif


% ----------------------------- Analysis --------------------------------

% How to turn it off? It is not applicable in real camera readout.

% Pulse shape analysis with pulse sum around global peak
% position only for significant pixels.
pulse_analysis = -17
% Pulse analysis provides a conditional 16 ns integration at 500 MHz sampling rate.
sum_before_peak = 3
sum_after_peak = 4
tailcut_scale = 1.4 % For built-in image cleaning





