% Configuration file for a NectarCam MST in Prod-4 (CTA-PROD4 setup).

  echo
  echo ************************************************************************
#ifdef TELESCOPE
  echo Configuration for NectarCam MST $(TELESCOPE) in Prod-4.
#else
  echo Global configuration parameters for NectarCam MSTs in Prod-4.
#endif
  echo ************************************************************************
  echo

% Start with configuration items not specific for NectarCam.

#include <CTA-PROD4-site.cfg>
#include <CTA-PROD4-common.cfg>
#include <CTA-PROD4-MST-optics.cfg>
#include <CTA-PROD4-pmt.cfg>

% The remainder is specific for NectarCam.

camera_config_name = NectarCam
camera_config_variant = analog-majority
camera_config_version = 2020-06-28

% Camera body depth actually differs from FlashCam (only relevant for off-axis shadowing)
% but triggers a bug in sim_telarray versions before 2020-05-23, and costs CPU time.
% Thus not overriding the common zero depth here.

% Note: camera config file with new cone efficiency table (2019-11-20):
camera_config_file = camera_CTA-MST-NectarCam_20191120_majority-3nn.dat
% Same pixel ordering but older lightcone efficiency:
% camera_config_file = camera_CTA-MST-NectarCam_20171006_majority-3nn.dat
% Older pixel order and older lightcone efficiency:
% camera_config_file = camera_CTA-MST-NectarCam_majority-3nn.dat

camera_transmission = 1.0 % All of the transmission is now included in the camera_filter file.
% camera_filter = Aclylite8_tra_v2013ref.dat
camera_filter = transmission_lst_window_No7-10_ave.dat % was No7-10_ave.dat (already scaled from percent to absolute)

camera_pixels = 1855  % needs to be specified explicitly

min_photons = 450            % With fewer photons don't waste CPU time.
min_photoelectrons = 30      % Usually, more than 60 p.e. are required.
store_photoelectrons = 26    % Save individual photo-electrons

% NSB pixel p.e. rates evaluated via p4eff script (using testeff) and spreadsheet:
nightsky_background = all:0.21456 % New lower QE (& new light cones etc.) For reference NSB, 86 mirror segments.
#ifdef HALFMOON
  echo Configuring for sky illuminated by half moon in MST-NectarCam.
  nightsky_background = all:1.02011     % MST-NectarCam: half moon has 4.75x dark.
#endif
#if defined(MST84)
error Needs re-evaluation % New lower QE etc. For reference NSB 0.24 ph./(cm^2 ns sr), 84 mirror segments
#elif defined(MST88)
error Needs re-evaluation % New lower QE etc. For reference NSB 0.24 ph./(cm^2 ns sr), 88 mirror segments
#elif defined(MST90)
error Needs re-evaluation % New lower QE etc. For reference NSB 0.24 ph./(cm^2 ns sr), 90 mirror segments
#elif defined(MST80)
error Needs re-evaluation % New lower QE etc. For reference NSB 0.24 ph./(cm^2 ns sr), 80 mirror segments
#endif

% ---------------- Photo-sensors and front-end electronics --------------

% pm_photoelectron_spectrum = spe_afterpulse_pdf_NectarCam_14032019.dat
pm_photoelectron_spectrum = spe_afterpulse_pdf_NectarCam_18122019.dat
gain_variation = 0.02  % random gain variation, back to 2%
pm_voltage_variation = 0.04 % random voltage variation at given gain, overrrides value 0.03 in CTA-PROD4-pmt.cfg

transit_time_jitter = 0.7 % [ns] (p.e. to p.e. random fluctuation)
transit_time_error  = 0.5 % [ns] (PMT to PMT random differences, can be accurately calibrated)
transit_time_calib_error = 0. % [ns] (zero: perfectly accurate pixel timing calibration)
transit_time_compensate_step = 0. % [ns] (zero: no compensation of random transit time differences)
transit_time_compensate_error = 0. % [ns] (no compensation, no error needed)

% --------------- Placing of signals in simulated windows ---------------

% We need to shift the pulses further 'right' in the simulated time windows,
% such that the occasional early signals (at large core distance) are better covered.
#ifdef NECTARCAM_WITH_PULSE_SHIFT
% This variant is not so well tested and at this point not recommended.
photon_delay = 7     % ns. Just a small delay needed because the peak in the pulse shape is already shifted.
#else
photon_delay = 27    % ns. Pulse shape peaks earlier, thus need larger delay here.
#endif

% --------------------------- Trigger -----------------------------------

% The trigger simulation is over a slightly earlier window than the ADC signals (from interval -3 to 89 in ADC frame).
disc_bins = 93  % Number of time intervals simulated for trigger.
disc_start = 3  % How many intervals the trigger simulation starts before the ADC.

% Majority & analog sum input pulses (possible alternative to analog sum):
% discriminator_pulse_shape=pulse_CTA-Fx.dat % 2.9 ns FWHM + 300 MHz bandwidth -> 3.1 ns FWHM
% discriminator_pulse_shape=Pulse_template_nectarCam_22112018.dat
#ifdef NECTARCAM_WITH_PULSE_SHIFT
discriminator_pulse_shape=Pulse_template_nectarCam_17042020.dat  % Has pulse peak like in prod-3 (~30 ns)
#else
discriminator_pulse_shape=Pulse_template_nectarCam_17042020-noshift.dat % Has peak just after T=0 ns.
#endif
discriminator_amplitude = 6.8 % mV for mean p.e. amplitude

echo Digital majority trigger for NectarCam MST is emulated by analog majority trigger
default_trigger = Majority

% Discriminator/comparator threshold for analog majority:
trigger_pixels = 3              % This means actually a level of 2.5 pixels.
discriminator_threshold = 29    % mV on average. Note: effective threshold is higher because of time-over-thr.
discriminator_var_threshold = 2 % mV channel-to-channel variation

% Discriminator/comparator switching parameters:
discriminator_time_over_threshold    = 2.0 % was 0.5 [ns]
discriminator_var_time_over_threshold= 0
discriminator_sigsum_over_threshold  = 0 % pVs
discriminator_var_sigsum_over_threshold  = 0 % pVs
discriminator_hysteresis = 0. % not really known and has little impact

% Outputs from pixel 'logic':
discriminator_gate_length            = -3.0 % negative for normal discriminator
discriminator_var_gate_length        = 0
discriminator_output_amplitude   = 525 % was 42  % mV or whatever
discriminator_output_var_percent = 5       % is 10% for HESS
discriminator_rise_time = 0.8  % [ns]
discriminator_fall_time = 0.75 % [ns]


% Telescope trigger (specified even if no majority trigger is used):
teltrig_min_time                       1.0 % was 0.5 % ns
teltrig_min_sigsum                     0.0 % was 7.8 % pV.s

trigger_current_limit = 2000.0 % [microAmps] ???

% Re-evaluation of thresholds for nigh NSB needed once stabilized ...
#ifdef HALFMOON
  % Thresholds with rates at the limit for partial moon illumination
  % (note: pixel rate already set above, no scaling needed)
  discriminator_threshold = 42    % mV on average. Note: effective threshold is higher because of time-over-thr.
#endif
#ifdef THRESHOLD_5X
  discriminator_threshold = 43    % mV on average. Note: effective threshold is higher because of time-over-thr.
  nsb_scaling_factor = 5 
#endif
#ifdef THRESHOLD_7X
  discriminator_threshold = 48    % mV on average. Note: effective threshold is higher because of time-over-thr.
  nsb_scaling_factor = 5 
#endif
#ifdef THRESHOLD_30X
  nsb_scaling_factor = 30 
  discriminator_threshold = 10000 % never triggers
  min_photons = 100000000  % Bypass processing this telescope as early as possible
  Echo Effectively disabled at 30x dark NSB.
#endif

% trigger_delay_compensation = 0,-1,3 % Not needed anymore with just one type of trigger

% Reset any values related to analog sum trigger
asum_threshold = 0
asum_clipping = 0
asum_shaping_file = none % No further shaping needed - pulse is wide enough.
asum_offset = 0.0

% only_triggered_arrays=0
only_triggered_telescopes=1

% ------------------------------ Readout --------------------------------

% Sampling rate in MHz:
fadc_MHz = 1000 % MHz sampling rate

% fadc_pulse_shape = pulse_CTA-Fx3.dat % Fast sampling pulse shape with tail (as for LST)
% fadc_pulse_shape = Pulse_template_nectarCam_22112018.dat
#ifdef NECTARCAM_WITH_PULSE_SHIFT
fadc_pulse_shape = Pulse_template_nectarCam_17042020.dat  % Has pulse peak like in prod-3 (~30 ns)
#else
fadc_pulse_shape = Pulse_template_nectarCam_17042020-noshift.dat % Has peak just after T=0 ns.
#endif

% Same unit sensitivity of all ADCs of all pixels, HG and LG.
fadc_sensitivity = 1.0
fadc_var_sensitivity = 0.0

% Read-out of a 60 ns window (within simulated 105 ns, which extends 15 ns beyond 
% the end of 93 ns discriminator simulation) following the actual trigger:
fadc_bins = 105      % Number of time intervals simulated for ADC.
fadc_sum_bins = 60   % Number of ADC time intervals actually summed up.
#ifdef NECTARCAM_WITH_PULSE_SHIFT
% This variant is not so well tested and at this point not recommended.
fadc_sum_offset = 10 % How many intervals summation starts before telescope trigger.
#else
fadc_sum_offset = 18 % How many intervals summation starts before telescope trigger.
#endif

fadc_pedestal = 250          % Per time slice (positive signals only: unsigned!) 300 ?
fadc_var_pedestal = 1.9
fadc_amplitude = 19.56       % The peak amplitude in a time slice for high gain.
fadc_noise = 3.6             % Electronic noise per time slice (high gain). Adjusted to measured noise in sum of 16 slices.

num_gains = 2                % Simulate two gains.
fadc_lg_pedestal = 250       % Per time slice (positive signals only: unsigned!) 300 ?
fadc_lg_var_pedestal = 1.8   % A bit smaller than for high-gain
fadc_lg_amplitude = 1.40     % The peak amplitude in a time slice for low gain (HG/LG=14 now).
fadc_lg_noise = 3.6          % Electronic noise per time slice (low gain). Adjusted to measured noise in sum of 16 slices.

% ----------------------------- Analysis --------------------------------

% Pulse shape analysis with pulse sum around global peak
% position only for significant pixels.
pulse_analysis = -30

% Pulse analysis provides a conditional 10 ns integration at 1000 MHz sampling rate.
sum_before_peak = 4
sum_after_peak = 5

tailcut_scale = 2.3 % For built-in image cleaning

